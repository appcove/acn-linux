#!/usr/bin/python3.5
# vim:fileencoding=utf-8:ts=2:sw=2:expandtab

'''

--region us-east-1
--bucket appcove-backup
--server pink.appcove.net


'''

import optparse 
import subprocess
import sys
import os.path
import boto3
import botocore
import json
import logging


parser = optparse.OptionParser(usage='''
This program exists to help you setup AWS to get backups.

1. It assumes you have a bucket created. 
2. It assumes you have `aws cli` setup on your system with proper credentials for S3 and IAM.
3. It assumes you have boto3 for python 3.5 installed on your system too.

You can do #1 with the aws console
You can create your own user in the aws console
You can use `acn-setup-aws` to setup #2 and #3

The --path option can be called in one of two ways:
1. --path=/foo/bar
2. --path=/foo/bar:delete

The second option will invoke the --delete option to s3 sync

Example:
acn-aws-backup-configure --region=us-east-1 --bucket=appcove-backup --server=pink.appcove.net --path=/home/backup --path=/home/deploy:delete


''')
parser.add_option("--region", dest="Region", help="What AWS Region", metavar="REGION")
parser.add_option("--bucket", dest="Bucket", help="What AWS Bucket", metavar="BUCKET")
parser.add_option("--server", dest="Server", help="What Server to back up", metavar="SERVER")
parser.add_option("--path", dest="PathList", action="append", help="What Paths to back up", metavar="PATH")
parser.add_option("--debug", dest="Debug", action="store_true", help="Extensive boto debugging info")

(OPTS, ARGS) = parser.parse_args()


if not OPTS.Region:
  parser.error("--region is required, e.g. us-east-1")

if not OPTS.Bucket:
  parser.error("--bucket is required, e.g. mycompany-backup")

if not OPTS.Server:
  parser.error("--server is required, e.g., server.mycompany.com")

if not OPTS.PathList:
  parser.error("at least one --path is required, e.g. /home/backup")


REGION = OPTS.Region
BUCKET = OPTS.Bucket
BUCKETARN = 'arn:aws:s3:::' + BUCKET
SERVER = OPTS.Server
USERNAME = BUCKET + '-' + SERVER.replace('.', '-') 
DEBUG = OPTS.Debug


PATHLIST = []  #list of 2-tuples with (path, option)
for p in OPTS.PathList:
  a,b,c = p.partition(':')
  if c in ('', 'delete'):
    PATHLIST.append((a,c))
  else:
    parser.error('Invalid format of path `{}`'.format(p))

IAM = boto3.client('iam', region_name=REGION)

# Turn on low-level and wire logging:
if DEBUG:
  boto3.set_stream_logger(name='botocore')#, level=logging.DEBUG)

USERPOLICYNAME = USERNAME + '-s3-backup-policy'
USERPOLICY = json.dumps({
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "Stmt1471974638000",
      "Effect": "Allow",
      "Action": [
        "s3:GetObject",
        "s3:PutObject"
      ],
      "Resource": "arn:aws:s3:::" + BUCKET + "/" + SERVER + "/*"
    },
    {
      "Sid": "Stmt1471974638001",
      "Effect": "Allow",
      "Action": [
        "s3:ListBucket",
      ],
      "Resource": "arn:aws:s3:::" + BUCKET
    }
  ]
})


# Get Role
try:
  print('GETTING USER: ' + USERNAME)
  response = IAM.get_user(
    UserName = USERNAME,
    )
  
except botocore.exceptions.ClientError as e:
  if 'NoSuchEntity' not in str(e):
    raise
  
  print('ABOUT TO CREATE USER: ' + USERNAME)
  response = IAM.create_user(
    Path = '/backup-users/',
    UserName = USERNAME,
    )

try:
  print('ABOUT TO CREATE ACCESS KEYS FOR: ' + USERNAME)
  ACCESS_KEY = IAM.create_access_key(
    UserName=USERNAME,
  )
except botocore.exceptions.ClientError as e:
  if 'LimitExceeded' not in str(e):
    raise

  ACCESS_KEY = None
  print()
  print('ERROR! Acccess Key Limit Exceeded for user `{}`. Go to the IAM Console and remove one or more.'.format(USERNAME))
  print('Skipping access key setup...')
  print()


print('UPDATING USER POLICY FOR: ' + USERNAME)
IAM.put_user_policy(
  UserName = USERNAME,
  PolicyName = USERPOLICYNAME,
  PolicyDocument = USERPOLICY,
  )



###################################################################################################

print()
print('='*80)
print()
if ACCESS_KEY:
  print('How to use this...')
  print()
  print('Install `aws cli` and `boto3` on the server `{}` as root... THIS MAY TAKE SOME TIME'.format(SERVER))
  print()
  print('# acn-setup-aws')
  print()
  print('Here is the information you will need to configure aws...:')
  print()
  print('# AWS Access Key ID         : ' + ACCESS_KEY['AccessKey']['AccessKeyId'])
  print('# AWS Secret Access Key     : ' + ACCESS_KEY['AccessKey']['SecretAccessKey'])
  print('# Default region name       : ' + REGION)
  print('# Default output format     : ')
  print()

print('paste this this command to create a syncfile as root on `{}`...'.format(SERVER))
print()
print('-'*80)
print("echo '")
print("#!/bin/bash")
for path,option in PATHLIST:
  if option == '':
    print('aws s3 sync {} s3://{}/{}/'.format(path, BUCKET, SERVER))
  elif option == 'delete':
    print('aws s3 sync --delete {} s3://{}/{}/'.format(path, BUCKET, SERVER))
  else:
    raise ValueError('???')
    
print("' > /root/backup-to-s3.sh && chmod +x /root/backup-to-s3.sh")
print('-'*80)
print()
print('Install this crontab as root on server `{}`...'.format(SERVER))
print('-'*80)
print('0 2 * * *  /root/backup-to-s3.sh >> /root/backup-to-s3.log 2>&1')
print('-'*80)
print()
print('DONE')
print()
print('='*80)


