#!/usr/bin/python3.5
# vim:encoding=utf-8:ts=2:sw=2:expandtab

from acnpython35 import *
from getpass import getpass

try:
  print()
  if not exists('/etc/.git'):
    print('WARNING: /etc not tracked by .git. Please abort and run `acn-setup-etcgit`.')
    print()
  
  
  if GetInput_YesNo('Install apache (httpd) (DEF)? ', Default='yes'):
    call(('yum', 'install', 'httpd'))
    print('   ... done')
    print()

  if not exists('/etc/httpd/conf.virtualhost.d'):
    if GetInput_YesNo('Create /etc/httpd/conf.virtualhost.d (DEF)? ', Default='yes'):
      os.mkdir('/etc/httpd/conf.virtualhost.d', 0o755)
      print('   ... done')
      print()
  
  if GetInput_YesNo('Setup apache to start automatically (DEF)? ', Default='yes'):
    check_call(('chkconfig', 'httpd', 'on'))
    print('   ... done')
    print()
  

  while True:
    if GetInput_YesNo('Build/rebuild apache configuration (DEF)? ', Default='yes'):
      try:
       
        ServerName = check_output(('hostname')).strip().decode('utf-8')
        ServerID = ServerName.split('.')[0].upper()


        print()
        print('---')
        print('ServerID: Identifies the server.  Typically all upper case, 4 alphanumerics')
        print('')
        ServerID = GetInput_Regex('ServerID (DEF)? ', Regex='^[a-zA-Z0-9]+$', Default=ServerID)
        
        print()
        print('---')
        print('ServerName: fully qualified domain name of this apache server.')
        print('')
        ServerName = GetInput_Regex('ServerName (DEF)? ', Regex='^[a-zA-Z0-9._-]+$', Default=ServerName)
        
        print()
        print('---')
        print('ServerAdmin: Your address, where problems with the server should be')
        print('e-mailed.  This address appears on some server-generated pages, such')
        print('as error documents.  e.g. admin@your-domain.com')
        print('')
        ServerAdmin = GetInput_Regex('ServerAdmin? ', Regex=r'^[^@]+\@[^@]+$')
        
        print()
        print('---')
        print('Default Document Root: The (not really used except testing) directory ')
        print('directory you would like apache to serve files out of by default.')
        print('')
        DocumentRoot = GetInput_DirectoryPath('DocumentRoot (DEF): ', Default=Config.Apache.DocumentRoot)        

        print()
        print('---')
        print('Access Log: The location you would like the apache access log file to go to.')
        print('')
        CustomLog = GetInput_FilePath('Access Log Location (DEF): ', Default=Config.Apache.CustomLog)
        
        print()
        print('---')
        print('Error Log: The location you would like the apache error log file to go to.')
        print('')
        ErrorLog = GetInput_FilePath('Error Log Location (DEF): ', Default=Config.Apache.ErrorLog)

        print()
        print('--- WRITING httpd.conf ---')
        data = ReadSystemFile('etc/httpd/conf/httpd.conf')
        
        # uppercase is a fix for {abc} being used in the conf file elsewhere
        data = data.replace('{SERVERID}', str(ServerID)) 
        data = data.replace('{SERVERNAME}', str(ServerName))
        data = data.replace('{SERVERADMIN}', str(ServerAdmin))
        data = data.replace('{DOCUMENTROOT}', str(DocumentRoot))
        data = data.replace('{CUSTOMLOG}', str(CustomLog))
        data = data.replace('{ERRORLOG}', str(ErrorLog))
        
        WriteSystemFile('etc/httpd/conf/httpd.conf', data)
        print('   ... done')
        print()
     
        print()
        print('--- WRITING conf.d/welcome.conf ---')
        CopySystemFile('etc/httpd/conf.d/welcome.conf')
        print('   ... done')
        print()

        if GetInput_YesNo('Run `service httpd configtest` (DEF)? ', Default='yes'):
          if call(('service', 'httpd', 'configtest')) > 0:
            print()
            print('ERRORS were found during configest.  Will give you a chance to rebuild.')
            print('Please note that /etc/httpd/conf/httpd.conf HAS BEEN INSTALLED.')
            print()
            continue

      except KeyboardInterrupt:
        print()
        print()
        continue
    break

  if GetInput_YesNo('Install mod_rpaf for apache (DEF)? ', Default='yes'):
    call(('rpm', '-i', join(Path, 'rpms', 'mod_rpaf-0.6-0.acn.el6.x86_64.rpm')))
    print('   ... done')
    print()


  while True:
    if GetInput_YesNo('Build/rebuild mod_rpaf configuration (DEF)? ', Default='yes'):
      try:
       
        print()
        print('--- mod_rpaf: what source addresses should mod_rpaf pay attention to ---')
        print('Typically, this would be the address nginx is running on.')
        print('Default is 127.0.0.1')
        print()
        
        RPAFproxy_ips = []
        while True:
          ip = GetInput_IPv4('Enter IP for RPAFproxy_ips (skip): ', Default=None)
          if ip != None:
            RPAFproxy_ips.append(ip)
          else:
            break
        print()
        RPAFproxy_ips = RPAFproxy_ips or ['127.0.0.1']
        
        print('--- WRITING rpaf.conf ---')
        data = ReadSystemFile('etc/httpd/conf.d/rpaf.conf')
        data = data.replace('{RPAFproxy_ips}', str.join(' ', RPAFproxy_ips))
        WriteSystemFile('etc/httpd/conf.d/rpaf.conf', data)
        print('   ... done')
        print()
     
        if GetInput_YesNo('Run `service httpd configtest` (DEF)? ', Default='yes'):
          if call(('service', 'httpd', 'configtest')) > 0:
            print()
            print('ERRORS were found during configest.  Will give you a chance to rebuild.')
            print()
            continue

      except KeyboardInterrupt:
        print()
        print()
        continue
    break


  if GetInput_YesNo('Start apache? (DEF)? ', Default='yes'):
    check_call(('service', 'httpd', 'restart'))
    print('   ... done')
    print()

 
  print()
  print()


except Exception as e:
  print()
  print()
  print('*** Fatal Error ***')
  print(e)
  print()
except KeyboardInterrupt:
  print()  
  print()
  print('*** User Abort ***')
  print()
