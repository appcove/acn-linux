#!/usr/bin/python3
# vim:encoding=utf-8:ts=2:sw=2:expandtab

# Setup the path
import time, os.path, sys; sys.path.insert(1, os.path.abspath(sys.path[0] + "/../Python"))

import os
import sys
import json
from base64 import b64encode

# # Add acnpython33 so that we can import GetInput_*
# if os.path.exists('/opt/acn-linux/bin/acnpython33.py'):
#   sys.path.insert(0, '/opt/acn-linux/bin')

# from acnpython33 import *

try:
  from DocStruct import Setup
  from DocStruct.Base import EC2
except ImportError:
  print()
  print("Seems like your environment is not setup up correctly.")
  print("Please make sure DocStruct.Setup is importable before running this script.")
  print("HINT: run `setup-aws-env.py`")
  print()
  sys.exit(0)

import argparse
parser = argparse.ArgumentParser(description="Terminate an instance running within a DocStruct environment.")
# Parse the credentials file name
parser.add_argument(
  "credsfilename", metavar="credsfilename", type=str,
  help="Path to the CSV file to use for credentials to access AWS"
  )
# Parse the environment name
parser.add_argument(
  "environment_id", metavar="environment_id", type=str,
  help="ID of the environment within which we want to terminate instance"
  )
# Parse the instance ID
parser.add_argument(
  "instance_id", type=str,
  help="ID of instance we would like to terminate"
  )

# Parse arguments
args = parser.parse_args()

# Assert that the credentials file actually exists
try:
  assert os.path.exists(args.credsfilename)
except AssertionError:
  print("Could not find credential file at %s. Please make sure the file actually exists before continuing..." % args.credsfilename)
  sys.exit(1)

# Assert that an environment with the provided name actually exists
try:
  # Make sure the global environment exists
  globalconf = Setup.GetGlobalConfig(None, args.environment_id, credsfilename)
  assert globalconf
except AssertionError:
  print("Could not find environment named %s. Please make sure the environment exists before calling this script." % args.environment_id)
  sys.exit(1)
  
# Supply this config to the LaunchInstance call
session = Setup.GetSession(credsfilename=credsfilename)
ret = EC2.TerminateInstance(session=session, instanceid=args.instance_id)
