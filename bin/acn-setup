#!/usr/bin/python3.3
# vim:encoding=utf-8:ts=2:sw=2:expandtab

from acnpython33 import *

from collections import OrderedDict

n = 9
def N():
  global n
  n += 1
  return str(n)
  

CDEF = [
  #ID      Type           Data (per Type)              Description
  (N(),    'acn-command', 'acn-setup-etcgit',          'Setup /etc with git'               ),
  (N(),    'acn-command', 'acn-setup-root',            'Configure root user'               ),
  (N(),    'acn-command', 'acn-setup-timezone',        'Set timzone'                       ),
  (N(),    'acn-command', 'acn-setup-ntpd',            'Enable ntpd and run ntpdate'       ),
  (N(),    'acn-command', 'acn-setup-hostname',        'Set hostname'                      ),
  (N(),    'acn-command', 'acn-setup-iptables',        'Build a firewall'                  ),
  (N(),    'acn-command', 'acn-setup-user',            'Add/update a user'                 ),
  (N(),    'acn-command', 'acn-setup-sshd',            'Lock down sshd'                    ),
  (N(),    'acn-command', 'acn-setup-vim',             'Install custom vimrc'              ),
  (N(),    'acn-command', 'acn-setup-mc',              'Install Midnight Commander'        ),
  (N(),    'acn-command', 'acn-setup-git',             'Install custom gitconfig'          ),
  (N(),    'acn-command', 'acn-setup-tree',            'Install tree'                      ),
  (N(),    'acn-command', 'acn-setup-imagemagick',     'Install ImageMagick'               ),
  (N(),    'acn-command', 'acn-setup-deploy',          'Build (acn\'ish) deploy user'      ),
  (N(),    'acn-command', 'acn-setup-nginx',           'Install/setup nginx'               ),
  (N(),    'acn-command', 'acn-setup-postgres',        'Install/setup postgresql 9.2'      ),
  (N(),    'acn-command', 'acn-setup-python-postgres', 'Install/setup python-postgresql'   ),
  (N(),    'acn-command', 'acn-setup-python-redis',    'Install/setup python-redis pkgs'   ),
  (N(),    'acn-command', 'acn-setup-mysql',           'Install/setup mysql 5.1'           ),
  (N(),    'acn-command', 'acn-setup-apache',          'Install/setup apache'              ),
  (N(),    'acn-command', 'acn-setup-php',             'Install/setup php 5.4'             ),
  (N(),    'acn-command', 'acn-setup-modwsgi',         'Install/setup mod_wsgi'            ),
  (N(),    'acn-command', 'acn-setup-redis',           'Install/setup redis'               ),
  (N(),    'acn-command', 'acn-setup-memcached',       'Install/setup memcached'           ),
  (N(),    'acn-command', 'acn-setup-php-memcache',    'Install/setup php-memcache'        ),
  (N(),    'acn-command', 'acn-setup-yumcron',         'Install/setup yum-cron'            ),
  (N(),    'acn-command', 'acn-setup-mock',            'Install/setup mock and rpmbuild'   ),
  (N(),    'acn-command', 'acn-setup-systemupdate',    'Update all packages'               ),
  ('exit', 'exit',        '',                          'Exit the program'                  ),
  ]

ADEF = {
  'quit'  : 'exit',
  }



###############################################################################
CommandMap = OrderedDict()
for r in CDEF:
  CommandMap[r[0]] = r[1:]

AliasMap = OrderedDict(((r[0],r[0]) for r in CDEF))
AliasMap.update(ADEF)

input = ''

try:
  while True:
    print()
    print('Available Commands: ')
    i = 0
    for command, data in CommandMap.items():
      print("  {0:.<8} {1:.<40} ({2})".format(command, data[2], data[1]))
    
    if input:
      print()
      print("Last command entered was: {0}".format(input))
    
    print()
    input = GetInput_Choices('Enter Command: ', Choices=AliasMap.keys(), PrintChoices=False)
    command = CommandMap[AliasMap[input]]
  
    if command[0] == 'acn-command':
      try:
        cmd = join(Path, 'bin', command[1])
        print()
        print("CALLING {0}".format(cmd))
        print()
        call((cmd))
      except KeyboardInterrupt:
        pass
    
    elif command[0] == 'exit':
      print()
      sys.exit(0)
    
    else:
      print("Unknown command type: '{0}'".format(command_type))

    print()
    GetInput("Press enter to continue...")
    print()

  pass#while

  print()


#except Exception as e:
#  print()
#  print()
#  print('*** Fatal Error ***')
#  print(e)
#  print()
except KeyboardInterrupt:
  print()  
  print()
  print('*** User Abort ***')
  print()

