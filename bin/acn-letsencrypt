#!/usr/bin/python3.6
# vim:fileencoding=utf-8:ts=2:sw=2:expandtab

import sys
import os.path
import subprocess
import re
import builtins
import logging
import acme_tiny

LOGGER = logging.getLogger(__name__)
LOGGER.addHandler(logging.StreamHandler())
LOGGER.setLevel(logging.INFO)

DATA_PATH = '.'
TEST_MODE = False
ACME_CHALLENGE_PATH = '/home/deploy/ServerDocumentRoot/.well-known/acme-challenge'
DEFAULT_CA = "https://acme-v01.api.letsencrypt.org"


def ENABLE_TEST_MODE():
  global TEST_MODE
  global DEFAULT_CA
  TEST_MODE = True
  DEFAULT_CA = "https://acme-staging.api.letsencrypt.org"


def CommonNameToFileName(CommonName, Ext):
  '''
  Convert a common name to a safe file name
  '''
  return re.sub('[^a-zA-Z0-9_]', '-', CommonName) + ('.staging' if TEST_MODE else '') + '.' + Ext

def MakeAccountKey():
  KeyFile = os.path.join(DATA_PATH, 'Account.key')
  if os.path.exists(KeyFile):
    return

  with open(KeyFile, 'wb') as f:
    subprocess.check_call(('openssl', 'genrsa', '4096'), stdout=f)

def MakeDomainKey(CommonName):
  # openssl genrsa 4096 > Data/account.key
  KeyFile = os.path.join(DATA_PATH, CommonNameToFileName(CommonName, 'key'))
  
  with open(KeyFile, 'wb') as f:
    subprocess.check_call(('openssl', 'genrsa', '4096'), stdout=f)
  
def MakeDomainCsr(CommonName):
  # openssl req -new -sha256 -key domain.key -subj "/CN=yoursite.com" > domain.csr
  KeyFile = os.path.join(DATA_PATH, CommonNameToFileName(CommonName, 'key'))
  CsrFile = os.path.join(DATA_PATH, CommonNameToFileName(CommonName, 'csr'))

  subj = '/CN={}'.format(CommonName)

  with open(CsrFile, 'wb') as f:
    subprocess.check_call(('openssl', 'req', '-new', '-sha256', '-key', KeyFile, '-subj', subj), stdout=f)


def RequestDomainCrt(CommonName):
  po = subprocess.run(('curl', '--silent', 'https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem'), stdout=subprocess.PIPE)
  po.check_returncode()
  intermediate_crt = po.stdout.decode('utf-8')


  AccountFile = os.path.join(DATA_PATH, 'Account.key')
  CsrFile = os.path.join(DATA_PATH, CommonNameToFileName(CommonName, 'csr'))
  CrtFile = os.path.join(DATA_PATH, CommonNameToFileName(CommonName, 'crt'))
  
  signed_crt = acme_tiny.get_crt(AccountFile, CsrFile, ACME_CHALLENGE_PATH, log=LOGGER, CA=DEFAULT_CA, WellKnownCheck=False)

  with open(CrtFile, 'wt', encoding='utf-8') as f:
    f.write(signed_crt)
    f.write(intermediate_crt)



if __name__ == '__main__':
  # Means this was called directly

  import argparse
  import textwrap

  parser = argparse.ArgumentParser(
    description=textwrap.dedent('''
      This script automates the process of getting a signed TLS certificate from
      Let's Encrypt using the ACME protocol. 
      ''')
    )
 
  parser.add_argument("CommonName", action='store', help='Common Name')
  parser.add_argument("--test-mode", action="store_true", help="Use test mode")
  parser.add_argument("--data-path", action="store", help="Data Path for .key, .csr, .crt")

  args = parser.parse_args()

  CommonName = args.CommonName

  if args.data_path:
    DATA_PATH = args.data_path  #SET THE GLOBAL

  if args.test_mode:
    ENABLE_TEST_MODE()

  try:
    if '*' in CommonName:
      raise ValueError('Lets Encrypt does not support wildcards')
    MakeAccountKey()
    MakeDomainKey(CommonName)
    MakeDomainCsr(CommonName)
    RequestDomainCrt(CommonName)
  except Exception as e:
    print(e)
    sys.exit(1)

  sys.exit(0)



