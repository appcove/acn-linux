#!/usr/bin/python3
# vim:encoding=utf-8:ts=2:sw=2:expandtab

import sys
import os
# Add acnpython33 so that we can import GetInput_*
if os.path.exists('/opt/acn-linux/bin/acnpython33.py'):
  sys.path.insert(0, '/opt/acn-linux/bin')
try:
  import boto3
except ImportError:
  pass
else:
  print()
  print("Seems like your environment is already setup. Exiting.")
  print()
  print()
  sys.exit(0)

import venv
import subprocess
import shutil
import glob

from acnpython33 import *


# We will need these later
ENVNAME = 'env'
ENVPARENTPATH = '/opt/acn-linux/lib'
PIP_URL = 'https://raw.githubusercontent.com/pypa/pip/master/contrib/get-pip.py'
BOTO3_URL = 'https://github.com/boto/boto3.git'
BOTO3_COMMIT_ID = '2c5858179eb1834f7ca87590417ae2ef486dfce1'

try:
  print()
  print("This script will setup boto3 and all its dependencies.")
  print()

  if GetInput_YesNo('Do you want to continue (DEF)? ', Default='yes'):
    print()
    envparentpath = GetInput_FilePath('Where should I build the environment (DEF)? ', Default=ENVPARENTPATH)
    if not os.path.exists(envparentpath):
      os.mkdir(envparentpath)
      print('Created {0}'.format(envparentpath))
      print()
    elif not os.path.isdir(envparentpath):
      print('{0} either does not exist or not not a directory. Exiting.'.format(envparentpath))
      print()
      sys.exit(1)

    print()
    print()
    curdir = os.getcwd()
    os.chdir(envparentpath)
	# Python3 comes with the venv module we can use to create a virtual environment
    print("Creating environment in {0}".format(os.path.join(os.getcwd(), ENVNAME)))
    venv.create(ENVNAME)
    
    # Now we download the pip install script
    print("Downloading pip")
    subprocess.call(['wget', PIP_URL])
    
    # Setup pip inside the virtual environment
    print("Setting up pip in virtual environment")
    subprocess.call(['{0}/bin/python3'.format(ENVNAME), 'get-pip.py'])
    
    # Clone the boto3 library
    print("Cloning up boto3")
    subprocess.call(['git', 'clone', BOTO3_URL])
    
    # Make sure we checkout the tested branch of boto3
    os.chdir('boto3')
    subprocess.call(['git', 'checkout', '-b', 'production', BOTO3_COMMIT_ID])
    os.chdir('..')
    
    # We need to install all the boto3 dependencies into the environment
    print("Downloading and setting up requirements for boto3")
    subprocess.call(['{0}/bin/pip3'.format(ENVNAME), 'install', '-r', 'boto3/requirements.txt'])
    
    # The actual boto3 library resides in the boto3 dir within the outer boto3
    print("Adding boto3 itself to environment")
    # We will create a symlink in site-packages. But we need to find a python3 version
    darr = glob.glob('{0}/lib/python*'.format(ENVNAME))
    assert len(darr)
    pythonlibpath = os.path.abspath(os.path.join(darr[0], 'site-packages'))
    os.symlink(os.path.abspath('boto3/boto3'), os.path.join(pythonlibpath, 'boto3'))
	# We also need to symlink to bcdoc
    os.symlink(os.path.abspath('{0}/src/bcdoc/bcdoc'.format(ENVNAME)), os.path.join(pythonlibpath, 'bcdoc'))

    # Try to add the environment path to acn-linux.pth
    # NOTE: this part is disabled for now
    if False:
      acnpthfilearr = glob.glob('/usr/lib64/python3*/site-packages/acn-linux.pth')
      if len(acnpthfilearr) == 1:
        acnpthfile = acnpthfilearr[0]
        pthexists = False
        with open(acnpthfile, "r") as fp:
          for line in fp.readline():
            if line.strip() == pythonlibpath:
              pthexists = True
              break
        if not pthexists:
          with open(acnpthfile, "a") as fp:
            fp.write("{0}\n".format(pythonlibpath))
          print()
          print("Added {0} to {1}".format(pythonlibpath, acnpthfilearr[0]))
          print()
    
    # Now we are truly done
    os.chdir(curdir)

    # Add libacaws.py to site-packages
    if os.path.exists('libacaws.py'):
      shutil.copyfile('libacaws.py', '{0}/libacaws.py'.format(pythonlibpath))
  
  print()
  print()

except Exception as e:
  print()
  print()
  print('*** Fatal Error ***')
  print(e)
  print()
except KeyboardInterrupt:
  print()  
  print()
  print('*** User Abort ***')
  print()

