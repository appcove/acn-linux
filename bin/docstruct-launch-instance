#!/usr/bin/python3
# vim:encoding=utf-8:ts=2:sw=2:expandtab

# Setup the path
import time, os.path, sys; sys.path.insert(1, os.path.abspath(sys.path[0] + "/../Python"))

import os
import sys
import json
from base64 import b64encode


# Add acnpython33 so that we can import GetInput_*
if os.path.exists('/opt/acn-linux/bin/acnpython33.py'):
  sys.path.insert(0, '/opt/acn-linux/bin')


try:
  from DocStruct import Setup
except ImportError:
  print()
  print("Seems like your environment is not setup up correctly.")
  print("Please make sure DocStruct.Setup is importable before running this script.")
  print("HINT: run `setup-aws-env.py`")
  print()
  sys.exit(0)

from acnpython33 import *


try:
  print("""
This script will launch an instance of the DocStruct jobs processor.

""")

  if GetInput_YesNo('Do you want to continue (DEF)? ', Default='yes'):
    print()
    print()
    credsfilename = GetInput_FilePath('Provide path to credentials file (DEF): ', Default='{0}/.awscreds.csv'.format(os.environ['HOME']))
    # Find out which environment to launch instance in
    envname = GetInput_Regex('Please provide the name of the environment you would like to launch the instance in (tmt-amstmt-0 for example)? ', Regex=r'[a-z0-9-]+')
    # Make sure the global environment exists
    globalconf = Setup.GetGlobalConfig(None, envname, credsfilename)
    if not globalconf:
        print()
        print("Environment with name {0} is not setup yet. Please setup the environment and then run this script.".format(envname))
        print()
        sys.exit(0)

    # Supply this config to the LaunchInstance call
    session = Setup.GetSession(credsfilename=credsfilename)
    instances = Setup.LaunchInstances(Session=session, UserData=b64encode(json.dumps(globalconf).encode("utf-8")).decode("utf-8"))
    
    for instance in instances:
      print("Launched instance: {0}".format(instance))

  print()
  print()

except Exception as e:
  print()
  print()
  print('*** Fatal Error ***')
  raise
except KeyboardInterrupt:
  print()  
  print()
  print('*** User Abort ***')
  raise
finally:
  print()

