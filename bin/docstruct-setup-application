#!/usr/bin/python3
# vim:encoding=utf-8:ts=2:sw=2:expandtab

# Setup the path
import time, os.path, sys; sys.path.insert(1, os.path.abspath(sys.path[0] + "/../Python"))

import os
import sys


# Add acnpython33 so that we can import GetInput_*
if os.path.exists('/opt/acn-linux/bin/acnpython33.py'):
  sys.path.insert(0, '/opt/acn-linux/bin')


try:
  from DocStruct import Setup
except ImportError:
  print()
  print("Seems like your environment is not setup up correctly.")
  print("Please make sure DocStruct.Setup is importable before running this script.")
  print("HINT: run `setup-aws-env.py`")
  print()
  sys.exit(0)

from acnpython33 import *


def GetPyConfiguration(c):
  return '''

#######################################################################
# COPY CODE BELOW AND PASTE INTO ~/.ConfStruct.py
#######################################################################

AWS.User.ARN = "''' + c.userarn + '''"
AWS.User.Username = "''' + c.username + '''"
AWS.User.AccessKeyId = "''' + c.accesskey + '''"
AWS.User.SecretKey = "''' + c.secretkey  + '''"

AWS.SQS.QueueUrl = "''' + c.queueurl + '''"

AWS.Transcoder.RoleARN = "''' + c.rolearn + '''"
AWS.Transcoder.PipelineARN = "''' + c.pipelinearn + '''"
AWS.Transcoder.TopicARN = "''' + c.topicarn + '''"
AWS.Transcoder.WebPresetARN = "''' + c.webpresetarn  + '''"
AWS.Transcoder.WebmPresetARN = "''' + c.webmpresetarn  + '''"

AWS.InputBucket = "''' + c.inputbucketname + '''"
AWS.OutputBucket = "''' + c.outputbucketname + '''"
AWS.KeyPrefix = "''' + c.keyprefix + '''"

  '''


try:
  print("""
This script will help you connect a local application with an already provisioned AWS environment.

You will need to give the script admin credentials for your AWS account. These credentials
are only required for the duration that the script is running. It may be easiest to create
a temporary user using the Amazon AWS console. That user can be deleted after the script
finishes setup. Remember to download credentials from AWS and provide the path to the file
as an argument to the script.

""")

  if GetInput_YesNo('Do you want to continue (DEF)? ', Default='yes'):
    print()
    print()
    credsfilename = GetInput_FilePath('Provide path to credentials file (DEF): ', Default='credentials.csv')
    envname = GetInput_Regex('Please provide the name of the environment you would like to connect to (tmt-amstmt-0 for example)? ', Regex=r'[a-z0-9-]+')
    # Make sure the global environment exists
    globalconf = Setup.GetGlobalConfig(None, envname, credsfilename)
    if not globalconf:
        print()
        print("Environment with name {0} is not setup yet. Please setup the environment and then run this script.".format(envname))
        print()
        sys.exit(0)
    
    keyprefix = GetInput_Regex('Please provide an application specific key prefix (tmtmanage for example)? ', Regex=r'[a-z0-9-]+')

    
    # We can check if the environment already exists
    conf = Setup.GetLocalConfig(None, envname, keyprefix, credsfilename, globalconfig=globalconf)
    if conf:
      prompt = 'An app configuration with name "{1}" in environment "{0}" already exists. Would you like to reuse configuration from application (DEF)? '.format(envname, keyprefix)
      if not GetInput_YesNo(prompt, Default='yes'):
        print("Ok. Exiting. Please re-run this script with a different name for app key prefix")
        print()
        print()
        sys.exit(0)
    else:
      conf = Setup.MakeLocalEnvironment(credsfilename, envname, keyprefix, globalconfig=globalconf)

    print()
    print()
    print(GetPyConfiguration(conf))
    print()

  print()
  print()

except Exception as e:
  print()
  print()
  print('*** Fatal Error ***')
  raise
except KeyboardInterrupt:
  print()  
  print()
  print('*** User Abort ***')
  raise
finally:
  print()

