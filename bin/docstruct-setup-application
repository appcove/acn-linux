#!/usr/bin/python3
# vim:encoding=utf-8:ts=2:sw=2:expandtab

# Setup the path
import time, os.path, sys; sys.path.insert(1, os.path.abspath(sys.path[0] + "/../Python"))

import os
import sys

# # Add acnpython33 so that we can import GetInput_*
# if os.path.exists('/opt/acn-linux/bin/acnpython33.py'):
#   sys.path.insert(0, '/opt/acn-linux/bin')

# from acnpython33 import *

try:
  from DocStruct import Setup
except ImportError:
  print()
  print("Seems like your environment is not setup up correctly.")
  print("Please make sure DocStruct.Setup is importable before running this script.")
  print("HINT: run `setup-aws-env.py`")
  print()
  sys.exit(0)

def GetPyConfiguration(c):
  return '''

#######################################################################
# COPY CODE BELOW AND PASTE INTO ~/.ConfStruct.py
#######################################################################

AWS.User.ARN = "''' + c.userarn + '''"
AWS.User.Username = "''' + c.username + '''"
AWS.User.AccessKeyId = "''' + c.accesskey + '''"
AWS.User.SecretKey = "''' + c.secretkey  + '''"

AWS.SQS.QueueUrl = "''' + c.queueurl + '''"

AWS.InputBucket = "''' + c.inputbucketname + '''"
AWS.OutputBucket = "''' + c.outputbucketname + '''"
AWS.KeyPrefix = "''' + c.keyprefix + '''"

  '''

import argparse
parser = argparse.ArgumentParser(description="Sets up a DocStruct environment.")
# Parse the credentials file name
parser.add_argument(
  "credsfilename", metavar="credsfilename", type=str,
  help="Path to the CSV file to use for credentials to access AWS"
  )
# Parse the environment name
parser.add_argument(
  "environment_id", metavar="environment_id", type=str,
  help="Name of the environment within which we are going to setup an application"
  )
# Parse the application name
parser.add_argument(
  "application_id", metavar="application_id", type=str,
  help="Name of the application to setup with the environment"
  )
# Parse the "force" boolean
parser.add_argument(
  "--force", action="store_true",
  help="Tells the script to force update the application if it already exists."
  )
# Parse arguments
args = parser.parse_args()

# Assert that the credentials file actually exists
try:
  assert os.path.exists(args.credsfilename)
except AssertionError:
  print("Could not find credential file at %s. Please make sure the file actually exists before continuing..." % args.credsfilename)
  sys.exit(1)

# Assert that an environment with the provided name actually exists
try:
  # Make sure the global environment exists
  envconf = Setup.GetGlobalConfig(None, args.environment_id, args.credsfilename)
  assert envconf
except AssertionError:
  print("Could not find environment named %s. Please make sure the environment exists before calling this script." % args.environment_id)
  sys.exit(1)
 
# Assert that an environment with the provided name actually exists
# Check whether the environment already exists
# We can check if the environment already exists
appconf = Setup.GetLocalConfig(None, args.environment_id, args.application_id, args.credsfilename, globalconfig=envconf)
if not appconf or not args.force:
  appconf = Setup.MakeLocalEnvironment(args.credsfilename, args.environment_id, args.application_id, globalconfig=envconf)

print()
print(GetPyConfiguration(appconf))
print()
