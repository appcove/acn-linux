#!/usr/local/bin/python
from __future__ import with_statement

import sys
import os
from os.path import join, exists, isdir, abspath
from optparse import OptionParser
import shutil
from WB4 import PathInfo


Parser = OptionParser(usage="%prog [path]")

# -----------------------------------------------------------------------------
# Global options
Parser.add_option("--verbose", '-v',
    dest    = "Verbose",
    action  = "store_true",
    default = False,
    help    = "More verbose output."
    )

Parser.add_option("--force",
    dest    = "Force",
    action  = "store_true",
	default = False,
	help    = "Overwrite configration even if it already exists."
    )

# Parse command line
Opt, Arg = Parser.parse_args()


if len(Arg) == 0:
	Path = '.'
elif len(Arg) == 1:
	Path = Arg[0]
else:
	Parser.error("Too many arguments given")

Path = abspath(Path)

try:
	PI = PathInfo(Path)
except Exception, e:
	print "Error: %s" % e.message
	sys.exit(2)


if not isdir(PI.Instance):
	print "Error: %s is not a directory" % PI.Instance


if exists(PI.Conf):
	print "Notice: %s already exists." % PI.Conf
	
	if Opt.Force:
		print "  Removing %s !" % PI.Conf
		shutil.rmtree(PI.Conf)
	else:
		print "  Consider using --force to remove and recreate it."
		print "  ABORTING"
		sys.exit(3)



print "Creating directories..."

os.mkdir(PI.Conf)
os.mkdir(PI.AutoConf)
os.mkdir(PI.Package)

print "Creating default conf file..."

with open(PI.ConfFile, 'w') as f:
	f.write("# \n")
	f.write("# This is the WB4 Instance Configuration file. It enables you to customize\n")
	f.write("# the WB4 Instance. Consider the following: \n")
	f.write("# \n")
	f.write("# 1. Each variable defined in this file will be available to all \n")
	f.write("#    files included by this file.\n")
	f.write("# \n")
	f.write("# 2. The current working directory is set to the location of this file.\n")
	f.write("# \n")
	f.write("# 3. The `Instance` variable is automatically made available.\n")
	f.write("# \n")
	f.write("# 4. The Include(Path) function will include other configuration files.\n")
	f.write("#    It also supports globbing, for example: Include('*/_Twig.py') \n")
	f.write("# \n")
	f.write("# 5. The AutoConf(Path[, name=value[, ...]]) function registers an AutoConf\n")
	f.write("#    file which will be run at the end of reading the conf tree.  You can \n")
	f.write("#    pass arbitrary keyword arguments to it, which will become available\n")
	f.write("#    as local variables in the AutoConf file specified.\n")
	f.write("# \n")
	f.write("\n")
	f.write("\n")
	f.write("# Note: Here you have the opportunity to pre-initialize any values.\n")
	f.write("\n")
	f.write("\n")
	f.write("# Include the system configuration\n")
	f.write("Include('%s') \n" % PI.SystemConfFile)
	f.write("\n")
	f.write("\n")
	f.write("# Include the project twig files \n")
	f.write("Include('../*/_Twig.py')\n")
	f.write("\n")
	f.write("\n")
	f.write("# Note: Here you have the opportunity to post-override any values.\n")
	f.write("\n")


print "Done!"


	

		





