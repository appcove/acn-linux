#!/usr/bin/python3.8
# vim:fileencoding=utf-8:ts=2:sw=2:expandtab

# EXIT CODES:
#  64 = bad usage
#  65 = bad arguments (encoding or json)
#  66 = exception while runing command
#  67 = command not defined


import sys
import json
import traceback
import subprocess
import time
import datetime
from urllib.parse import quote_plus, unquote_plus
import re

IS_PG_IDENTIFIER = re.compile('^[a-zA-Z_][a-zA-Z0-9_()-]*$').match

# ACE passes "/opt/acn-linux/bin/ace-slave" as the command regardless as to if .authorized_keys has a command setup
# When .authorized_keys is setup with a command it will be "/opt/acn-linux/bin/ace-slave $SSH_ORIGINAL_COMMAND"
# Therefore it is possible to get this called with or without that string duplicated as the first two parts of sys.argv

if len(sys.argv) > 1 and sys.argv[1] == '/opt/acn-linux/bin/ace-slave':
  sys.argv = sys.argv[1:]

if len(sys.argv) != 3:
  sys.stderr.write('Usage: ace-slave <command> <json-encoded-data>\n')
  sys.stderr.write('Got: ' + repr(sys.argv) + '\n')
  sys.exit(64)

try:
  ARG_RAWCOMMAND = sys.argv[1]
  ARG_COMMAND = unquote_plus(ARG_RAWCOMMAND)
  ARG_RAWDATA = sys.argv[2]
  ARG_DATA = json.loads(unquote_plus(ARG_RAWDATA))
except Exception as e:
  sys.stderr.write('Error decoding arguments:\n' + str(e) + '\n')
  sys.stderr.write('Got: ' + repr(sys.argv) + '\n')
  sys.exit(65)



CommandMap = {}
class BaseCommand():
  def __init_subclass__(cls):
    CommandMap[cls.__name__] = cls

###################################################################################################
class ACE_Check_v1(BaseCommand):
  def __new__(cls, Data):
    
    RVAL = {}
    RVAL['acn-linux.status'] = subprocess.check_output(('git', '-C', '/opt/acn-linux', 'status', '--porcelain')).decode('utf-8')
    RVAL['acn-linux.log1'] = subprocess.check_output(('git', '-C', '/opt/acn-linux', 'log', '-1')).decode('utf-8')
    RVAL['acn-linux.HEAD'] = subprocess.check_output(('git', '-C', '/opt/acn-linux', 'rev-parse', 'HEAD')).decode('utf-8')
    RVAL['acn-linux.ace-slave.IsDirty'] = 'ace-slave' in RVAL['acn-linux.status']

    sys.stdout.write(json.dumps(RVAL) + "\n")


###################################################################################################

class PostgreSQL_Dump_v1(BaseCommand):
  def __new__(cls, Data):
    Database = Data['Database']
    if not IS_PG_IDENTIFIER(Database):
      raise ValueError(f'Invalid database name: {Database}')

    subprocess.check_call(('pg_dump', '--format=custom', Database))

###################################################################################################
class PostgreSQL_Load_v1(BaseCommand):
  '''
  stdin will be the pgdump stream to run through pg_restore
  '''

  def __new__(cls, Data):
    Database = Data['Database']
    Role = Data['Role']
    Dev0 = Data.get('Dev0')
    
    if not IS_PG_IDENTIFIER(Database):
      raise ValueError(f'Invalid database name: {Database}')
    
    if not IS_PG_IDENTIFIER(Role):
      raise ValueError(f'Invalid role name: {Role}')
    
    if ('-0' in Database or '_0' in Database) and not Dev0:
      raise ValueError(f'Refuse to run on 0 database: {Database}.  Pass {{..., Dev0: True}} to force')

    TempDatabase = datetime.datetime.utcnow().strftime('%Y%m%d%H%M%S') + '-' + Database 

    TempDatabaseDelete = datetime.datetime.utcnow().strftime('%Y%m%d%H%M%S') + '-' + Database + '--DIRTY'

    # 1. create temp database
    subprocess.check_call(('createdb', TempDatabase))

    # 2. Perform restore
    p1 = subprocess.Popen(('pg_restore', '--no-owner', '--role=root'), stdin=sys.stdin, stdout=subprocess.PIPE)
    p2 = subprocess.Popen(('psql', TempDatabase), stdin=p1.stdout)
    p1.stdout.close()
    p2.communicate()[0]

    # SECURITY: Database, TempDatabase, and Role were checked to be valid identifiers above
    sql = ('''
      REASSIGN OWNED BY root TO "{Role}";
      ''').format(Role=Role)

    sys.stderr.write(sql)

    subprocess.run(('psql', TempDatabase), input=sql.encode('utf-8'), check=True)
    
    # SECURITY: Database, TempDatabase, and Role were checked to be valid identifiers above
    sql = ('''
      SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname='{Database}';
      ALTER DATABASE "{Database}" RENAME TO "{TempDatabaseDelete}" ;
      ALTER DATABASE "{TempDatabase}" RENAME TO "{Database}" ;
      ''').format(TempDatabase=TempDatabase, TempDatabaseDelete=TempDatabaseDelete, Database=Database)

    sys.stderr.write(sql)

    subprocess.run(('psql',), input=sql.encode('utf-8'), check=True)
    

###################################################################################################

if ARG_COMMAND not in CommandMap:  
  sys.stderr.write(f'Command {ARG_COMMAND} not defined\n')
  sys.exit(67)
  
try:
  cmd = CommandMap[sys.argv[1]]
  ts = time.time()
  cmd(ARG_DATA)
  td = time.time() - ts
except Exception as e:
  sys.stderr.write(f'Exception {type(e)} encountered while running command {ARG_COMMAND}: \n{str(e)}\n\n' + traceback.format_exc())

  sys.exit(66)



sys.stderr.write(f'Command {ARG_COMMAND} with {ARG_DATA} successfully ran in {td:.3f} seconds.\n')
sys.exit(0)




