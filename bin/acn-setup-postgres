#!/usr/bin/python3.6
# vim:fileencoding=utf-8:ts=2:sw=2:expandtab

from acnpython36 import *

from os import symlink

try:
  print()
  if not exists('/etc/.git'):
    print('WARNING: /etc not tracked by .git. Please abort and run `acn-setup-etcgit`.')
    print()
  
    
  
  if GetInput_YesNo('Install the official postgresql yum repository (DEF)? ', Default='yes'):
    if Config.OS.Name == 'centos':
      call(("rpm", "-Uvh", Config.Postgres.RepoRPM_Centos))
    elif Config.OS.Name == 'redhat':
      call(("rpm", "-Uvh", Config.Postgres.RepoRPM_RHEL))
    elif Config.OS.Name == 'oracle':
      call(("rpm", "-Uvh", Config.Postgres.RepoRPM_Oracle))
    else:
      raise Exception('OS unknown')

    print('   ... done')
    print()


  if GetInput_YesNo('Install {0} (DEF)? '.format(Config.Postgres.ServerPackage), Default='yes'):
    call(('yum', 'install', Config.Postgres.ServerPackage, Config.Postgres.ClientPackage, Config.Postgres.ContribPackage))
    print('   ... done')
    print()
  
  if GetInput_YesNo('Setup postgresql to start automatically (DEF)? ', Default='yes'):
    check_call(('systemctl', 'enable', Config.Postgres.ServiceName))
    print('   ... done')
    print()
  
  if GetInput_YesNo('Initialize the postgresql database? (DEF)? ', Default='yes'):
    check_call(('/usr/pgsql-9.6/bin/postgresql96-setup', 'initdb'))
    print('   ... done')
    print()


  while True:
    if GetInput_YesNo('Build/rebuild postgres configuration (DEF)? ', Default='yes'):
      try:
        print()
        print('--- Accept Ranges: In addition to localhost ---')
        print()

        ACCEPT_RANGES = []
        while True:
          ipr = GetInput_IPv4('IP Range (eg, x.x.x.x/24) to accept connections from (skip): ', WithRange=True, Default=None)
          if ipr != None:
            ACCEPT_RANGES.append(ipr)
          else:
            break

        print()
        print('--- Listen Addresses: In addition to localhost ---')
        print()
        
        LISTEN_ADDRESSES = ['localhost']
        while True:
          ip = GetInput_IPv4('Enter IP for postgresql to listen on (skip): ', Default=None)
          if ip != None:
            LISTEN_ADDRESSES.append(ip)
          else:
            break
        
        
        print()
        print('---')
        print("Note: Increasing max_connections costs ~400 bytes of shared memory per")
        print("      connection slot, plus lock space (see max_locks_per_transaction.")
        print()
        MAX_CONNECTIONS = GetInput_Int('Max connections (DEF)? ', Default=100, MinValue=1, MaxValue=1000)

        print()
        print('---')
        print("See http://www.postgresql.org/docs/9.5/static/runtime-config-resource.html")
        print("    This should be set to up to 25% of ram for a dedicated machine.")
        print()
        SHARED_BUFFERS = GetInput_Int('Shared Buffers (MB as integer) (DEF)? ', Default=32, MinValue=1)

        while True:
          
          defaultzone = 'US/Eastern'

          for line in check_output(('timedatectl', 'status')).decode('utf-8').split('\n'):
            print(line)
            m = re.search('Time zone: (.+?) ', line)
            if m:
              defaultzone = m.group(1)
          
          TIMEZONE = GetInput_Regex("Timezone (DEF): ", Regex="^[a-zA-Z0-9_]+\/[a-zA-Z0-9_]+$", Default=defaultzone)
      
          if call(('test', '-f', join('/usr/share/zoneinfo', TIMEZONE))) > 0:
            print("Invalid timezone.")
            print()
            continue
      
          break
        pass#while

        print()
        print('--- WRITING pg_hba.conf ---')
        data = ReadSystemFile(join(Config.Postgres.InstallDir, 'data/pg_hba.conf'))
        for ipr in ACCEPT_RANGES:
          data += 'host    all         all         {0}        md5\n'.format(ipr)
        WriteSystemFile(join(Config.Postgres.InstallDir, 'data/pg_hba.conf'), data)
        print('   ... done')

        
        print()
        print('--- WRITING postgresql.conf ---')
        data = ReadSystemFile(join(Config.Postgres.InstallDir, 'data/postgresql.conf'))
        data = data.replace('{LISTEN_ADDRESSES}', "'{0}'".format(",".join(LISTEN_ADDRESSES)))
        data = data.replace('{MAX_CONNECTIONS}', str(MAX_CONNECTIONS))
        data = data.replace('{SHARED_BUFFERS}', str(SHARED_BUFFERS))
        data = data.replace('{TIMEZONE}', str(TIMEZONE))
        WriteSystemFile(join(Config.Postgres.InstallDir, 'data/postgresql.conf'), data)
        print('   ... done')
        print()
      
      except KeyboardInterrupt:
        print()
        print()
        continue
    break


  if GetInput_YesNo('Start postgresql? (DEF)? ', Default='yes'):
    check_call(('systemctl', 'restart', Config.Postgres.ServiceName))
    print('   ... done')
    print()

 
  if GetInput_YesNo('Do you want to add a postgresql superuser and database (DEF)? ', Default='yes'):
    while True:
      try:
        user = GetInput_Regex("Enter the username to add: ", Regex='^[a-zA-Z0-9_-]+$')
        print('Creating user...')
        call('/bin/su --command="/usr/bin/createuser -Ps {0}" - postgres'.format(user), shell=True)
        print('   ... done')
        print()
        print('Creating database...')
        call('/bin/su --command="/usr/bin/createdb --owner={0} {0}" - postgres'.format(user), shell=True)
        print('   ... done')
        print()

      except KeyboardInterrupt:
        print()
        print()
        continue
      if GetInput_YesNo('Do you want to add another posgresql superuser and database (DEF)? ', Default='no'):
        print()
        continue
      break

  print()
  print()


except Exception as e:
  print()
  print()
  print('*** Fatal Error ***')
  print(e)
  print()
except KeyboardInterrupt:
  print()  
  print()
  print('*** User Abort ***')
  print()
