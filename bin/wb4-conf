#!/usr/bin/python

import acnpython26



#TODO: look at Parser.destroy() to break cyclic memory references..  Perhaps destroy it before entering the main workers.

import sys
from optparse import OptionParser

Parser = OptionParser(usage="%prog [instancepath]")

###############################################################################
# Define options

Parser.add_option("--show", '-s',
    dest    = "Show",
    action  = "store_true",
    default = False,
    help    = "Show configuration instead of saving."
    )

Parser.add_option("--dump-python",
    dest    = "DumpPython",
    action  = "store_true",
    default = False,
    help    = "Dump a pythonic representation of the data gathered."
    )

Parser.add_option("--debug", '-d',
    dest    = "Debug",
    action  = "store_true",
    default = False,
    help    = "Print more debugging info."
    )

###############################################################################
# Parse command line
Opt, Arg = Parser.parse_args()

# Read in arguments
if len(Arg) == 0:
	InstancePath = '.'
elif len(Arg) == 1:
	InstancePath = Arg[0]
else:
	Parser.error("Too many arguments.")

###############################################################################


from WB4.ConfTree import TreeException, Tree


try:

	EM = "Error Found while reading tree:"
	
	oTree = Tree(InstancePath)
	oTree.Load()
	
	if Opt.Show:
		EM = "Error Found while dumping tree:"		
		oTree.VarDump()

	elif Opt.DumpPython:
		EM = "Error found while dumping python:"
		print oTree.ToNative()

	else:	
		EM = "Error Found while saving:"
		oTree.Save()

except TreeException, e:
	
	if Opt.Debug:
		raise
	
	print
	print EM
	for i in e.Stack:
		print "  ", i
	print "  ", e.message
	print 

	sys.exit(2)

except IOError, e:
	
	if Opt.Debug:
		raise

	print
	print EM
	print "  IOError: [Error %s] %s: '%s'" % (e.errno, e.strerror, e.filename)
	print 

	sys.exit(3)


except Exception, e:
	
	if Opt.Debug:
		raise

	print
	print EM
	print "  ", e.message
	print 

	sys.exit(3)







